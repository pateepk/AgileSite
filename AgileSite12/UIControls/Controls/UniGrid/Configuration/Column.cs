using System.ComponentModel;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml.Linq;

using CMS.Helpers;

namespace CMS.UIControls.UniGridConfig
{
    /// <summary>
    /// UniGrid column.
    /// </summary>
    [ParseChildren(true)]
    public class Column : AbstractConfiguration
    {
        #region "Variables"

        private bool mLocalize = true;

        #endregion


        #region "Properties"

        /// <summary>
        /// Column tooltip.
        /// </summary>
        [PersistenceMode(PersistenceMode.InnerProperty), DefaultValue((string)null), Browsable(false)]
        public ColumnTooltip Tooltip
        {
            get;
            set;
        }


        /// <summary>
        /// Column filter.
        /// </summary>
        [PersistenceMode(PersistenceMode.InnerProperty), DefaultValue((string)null), Browsable(false)]
        public ColumnFilter Filter
        {
            get;
            set;
        }


        /// <summary>
        /// Corresponding grid field.
        /// </summary>
        [PersistenceMode(PersistenceMode.InnerProperty), DefaultValue((string)null), Browsable(false)]
        public DataControlField Field
        {
            get;
            set;
        }


        /// <summary>
        /// Indicates whether the column can be used to sort the rows of the UniGrid.
        /// </summary>
        public bool AllowSorting
        {
            get;
            set;
        }


        /// <summary>
        /// Indicates if column can be exported using general export.
        /// </summary>
        public bool AllowExport
        {
            get;
            set;
        }


        /// <summary>
        /// Specifies the resource string used as the header for the column. Must begin and end with the $ character.
        /// Sample value: "$general.name$"
        /// </summary>
        public string Caption
        {
            get;
            set;
        }


        /// <summary>
        /// Specifies the name of the CSS class from the stylesheet to be used for the column.
        /// </summary>
        public new string CssClass
        {
            get;
            set;
        }


        /// <summary>
        /// Name of the column passed as the sourceName parameter of the OnExternalDataBound event handler. Used for implementing custom functionality in the cells of the given column.
        /// </summary>
        public string ExternalSourceName
        {
            get;
            set;
        }


        /// <summary>
        /// If a URL is entered here, a link to this URL is generated around the content of the cells in this column. Macros {0}, {1}, ... can be used to access parameters defined by the parameters attribute.
        /// Sample value: "~/page.aspx"
        /// </summary>
        public string Href
        {
            get;
            set;
        }


        /// <summary>
        /// Name of an image that should be added into the column cells after the loaded data. The image must be located in the folder defined by the ImageDirectoryPath property of the UniGrid.
        /// Sample value: "edit.png"
        /// </summary>
        public string Icon
        {
            get;
            set;
        }


        /// <summary>
        /// Indicates whether the content of the column is of type Text or nText. This is used to generate a special OrderBy clause of the query, so it must be set if sorting is enabled for the column.
        /// </summary>
        public bool IsText
        {
            get;
            set;
        }


        /// <summary>
        /// Indicates whether localization is enabled for strings in the column.
        /// </summary>
        public bool Localize
        {
            get
            {
                return mLocalize;
            }
            set
            {
                mLocalize = value;
            }
        }


        /// <summary>
        /// Names of the columns used as parameters of the URL generated by the Href attribute. Separated by semicolons.
        /// </summary>
        public string Parameters
        {
            get;
            set;
        }


        /// <summary>
        /// Name of the column from the data source of the UniGrid that is used as the source for the content of this column. The special macro ##ALL## can be used to specify all columns.
        /// </summary>
        public string Source
        {
            get;
            set;
        }


        /// <summary>
        /// Used to define the column name to be used for sorting if the ##ALL## macro is used in the source attribute.
        /// </summary>
        public string Sort
        {
            get;
            set;
        }


        /// <summary>
        /// The style used for the entire column.
        /// Sample value: "padding:10px"
        /// </summary>
        public new string Style
        {
            get;
            set;
        }


        /// <summary>
        /// Indicates whether the column should be visible.
        /// </summary>
        public new bool Visible
        {
            get;
            set;
        }


        /// <summary>
        /// Determines the width of the column.
        /// Sample values: "20%", "200px"
        /// </summary>
        public new string Width
        {
            get;
            set;
        }


        /// <summary>
        /// Indicates whether word wrapping is used in the column.
        /// </summary>
        public bool Wrap
        {
            get;
            set;
        }


        /// <summary>
        /// Action of the column.
        /// </summary>
        public string Action
        {
            get;
            set;
        }


        /// <summary>
        /// Maximum length of the text.
        /// </summary>
        public int MaxLength
        {
            get;
            set;
        }


        /// <summary>
        /// Command argument for the action.
        /// </summary>
        public string CommandArgument
        {
            get;
            set;
        }


        /// <summary>
        /// Column name.
        /// </summary>
        public string Name
        {
            get;
            set;
        }

        #endregion


        #region "Constructors"

        /// <summary>
        /// Constructor.
        /// </summary>
        public Column()
        {
            AllowSorting = true;
            AllowExport = true;
            Visible = true;
            Wrap = true;
            IsText = false;
        }


        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="element">Xml node with the column definition</param>
        public Column(XElement element)
            : this()
        {
            Href = element.GetAttributeStringValue("href");
            ExternalSourceName = element.GetAttributeStringValue("externalsourcename");
            Localize = element.GetAttributeValue("localize", true);
            Icon = element.GetAttributeStringValue("icon");
            Action = element.GetAttributeStringValue("action");
            MaxLength = element.GetAttributeValue("maxlength", 0);
            Source = element.GetAttributeStringValue("source");
            AllowSorting = element.GetAttributeValue("allowsorting", true);
            AllowExport = element.GetAttributeValue("allowexport", true);
            Sort = element.GetAttributeStringValue("sort");
            CommandArgument = element.GetAttributeStringValue("commandargument");
            Parameters = element.GetAttributeStringValue("parameters");
            Style = element.GetAttributeStringValue("style");
            CssClass = element.GetAttributeStringValue("cssclass");
            Width = element.GetAttributeStringValue("width");
            Caption = element.GetAttributeStringValue("caption");
            Visible = element.GetAttributeValue("visible", true);
            IsText = element.GetAttributeValue("istext", false);
            Wrap = element.GetAttributeValue("wrap", true);
            Name = element.GetAttributeStringValue("columnname");
            
            // Tooltip
            var tooltip = element.GetElement("tooltip");
            if (tooltip != null)
            {
                Tooltip = new ColumnTooltip(tooltip);
            }

            // Filter
            var filter = element.GetElement("filter");
            if (filter != null)
            {
                Filter = new ColumnFilter(filter);
            }
        }

        #endregion
    }
}