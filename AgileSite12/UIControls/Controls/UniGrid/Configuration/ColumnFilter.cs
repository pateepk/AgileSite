using System.ComponentModel;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml.Linq;

using CMS.Helpers;

namespace CMS.UIControls.UniGridConfig
{
    /// <summary>
    /// Column Filter settings.
    /// </summary>
    public class ColumnFilter : Component
    {
        #region "Properties"

        /// <summary>
        /// Can be used to define a custom WHERE clause format to be generated by the default filter. The following expressions can be used:
        /// {0} - is resolved into the column name
        /// {1} - is resolved into the operator selected in the drop-down list of the default filter
        /// {2} - is resolved into the value entered into the textbox of the default filter
        /// " [{0}] {1} '{2}' "
        /// </summary>
        public string Format
        {
            get;
            set;
        }


        /// <summary>
        /// Determines the maximum amount of characters that can be entered into the textbox of the default filter. Available for Text, Integer, Double and Decimal filter types. The default value is 1000.
        /// </summary>
        public int Size
        {
            get;
            set;
        }


        /// <summary>
        /// Determines the width of the control to customize the default width. (for default filters)
        /// </summary>
        public Unit Width
        {
            get;
            set;
        }


        /// <summary>
        /// Filter field name to be used by the filter form. When not specified, Source property is used as field name.
        /// </summary>
        public string FieldName
        {
            get;
            set;
        }


        /// <summary>
        /// Name of the column used in the WHERE clause generated by the filter.
        /// </summary>
        public string Source
        {
            get;
            set;
        }


        /// <summary>
        /// Path to the control (.ascx file) that should be used instead of the default filter for the column. If filled, the type attribute is ignored. The default relative path is ~/CMSAdminControls/UI/UniGrid/Filters/.
        /// </summary>
        public string Path
        {
            get;
            set;
        }


        /// <summary>
        /// Default value of the filter
        /// </summary>
        public string DefaultValue
        {
            get;
            set;
        }


        /// <summary>
        /// The filter type that should be created for the given column. Available values: "Text", "Bool", "Integer", "Double", "Decimal".
        /// </summary>
        public UniGridFilterTypeEnum Type
        {
            get;
            set;
        }


        /// <summary>
        /// Custom filter parameters.
        /// </summary>       
        [PersistenceMode(PersistenceMode.InnerProperty), DefaultValue((string)null), Browsable(false)]
        public CustomFilterParameters CustomFilterParameters
        {
            get;
            set;
        }


        /// <summary>
        /// Form control name
        /// </summary>
        public string ControlName
        {
            get;
            set;
        }

        #endregion


        #region "Methods"

        /// <summary>
        /// Empty constructor.
        /// </summary>
        public ColumnFilter()
        {
            Size = 1000;
        }


        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="element">Filter XML element</param>
        public ColumnFilter(XElement element)
            : this()
        {
            Type = element.GetAttributeStringValue("type").ToEnum<UniGridFilterTypeEnum>();
            FieldName = element.GetAttributeStringValue("fieldname");
            Source = element.GetAttributeStringValue("source");
            Format = element.GetAttributeStringValue("format");
            Path = element.GetAttributeStringValue("path");
            ControlName = element.GetAttributeStringValue("controlname");
            DefaultValue = element.GetAttributeStringValue("defaultvalue");

            Size = element.GetAttributeValue("size", 1000);

            string width = element.GetAttributeStringValue("width");
            if (!string.IsNullOrEmpty(width))
            {
                Width = new Unit(width);
            }

            // Filter parameters
            var customFilter = element.GetElement("parameters");
            if (customFilter != null)
            {
                CustomFilterParameters = new CustomFilterParameters(customFilter);
            }
        }

        #endregion
    }
}