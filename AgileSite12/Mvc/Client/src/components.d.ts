/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  Theme,
} from '@/builder/types';
import {
  ModalDialogConfiguration,
  ModalDialogMessages,
} from './builder/web-components/modal-dialog/modal-dialog-types';
import {
  Entities,
  LocalizationService,
  PersonalizationConditionTypeMetadata,
  PopupListingElement,
} from '@/builder/declarations/index';
import {
  EventEmitter,
} from '@stencil/core';
import {
  GetString,
} from './builder/web-components/selectors/selector-types';
import {
  MediaFile,
  MediaFilesSelectorItem,
  UploaderOptions,
} from './builder/web-components/selectors/media-files-selector/types';
import {
  GridItem,
} from './builder/web-components/selectors/media-files-selector/grid/grid-item';
import {
  SelectorItem,
} from './builder/web-components/selectors/media-files-selector/library-selector/selector-item';
import {
  TreeNode,
} from './builder/web-components/selectors/media-files-selector/tree/tree-node';
import {
  GetString as GetString2,
} from '@/builder/web-components/selectors/selector-types';
import {
  IdentifierMode,
} from '@/builder/web-components/selectors/page-selector/page-selector-types';
import {
  ListingItem,
  MillerColumn,
  SelectItemEventDetail,
} from './builder/web-components/selectors/page-selector/miller-columns-types';
import {
  IdentifierMode as IdentifierMode2,
  SelectedPage,
  SelectedValue,
  TreeNode as TreeNode2,
} from './builder/web-components/selectors/page-selector/page-selector-types';
import {
  ButtonIcon,
} from '@/page-builder/types';
import {
  AxiosInstance,
} from 'axios';
import {
  BuilderConfig,
} from '@/builder/BuilderConfig';
import {
  ComponentPosition,
} from '@/builder/store/types';
import {
  AbTestVariantListingElement,
} from '@/page-builder/declarations/components/abtest-variant-listing';
import {
  VariantListingElement,
} from '@/page-builder/declarations';

declare global {

  namespace StencilComponents {
    interface KenticoAddComponentButton {
      'primary': boolean;
      'tooltip': string;
    }
  }

  interface HTMLKenticoAddComponentButtonElement extends StencilComponents.KenticoAddComponentButton, HTMLStencilElement {}

  var HTMLKenticoAddComponentButtonElement: {
    prototype: HTMLKenticoAddComponentButtonElement;
    new (): HTMLKenticoAddComponentButtonElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-add-component-button': HTMLKenticoAddComponentButtonElement;
  }
  interface ElementTagNameMap {
    'kentico-add-component-button': HTMLKenticoAddComponentButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-add-component-button': JSXElements.KenticoAddComponentButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoAddComponentButtonAttributes extends HTMLAttributes {
      'onOpenComponentList'?: (event: CustomEvent) => void;
      'primary'?: boolean;
      'tooltip'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoAlertBox {
      'message': string;
    }
  }

  interface HTMLKenticoAlertBoxElement extends StencilComponents.KenticoAlertBox, HTMLStencilElement {}

  var HTMLKenticoAlertBoxElement: {
    prototype: HTMLKenticoAlertBoxElement;
    new (): HTMLKenticoAlertBoxElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-alert-box': HTMLKenticoAlertBoxElement;
  }
  interface ElementTagNameMap {
    'kentico-alert-box': HTMLKenticoAlertBoxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-alert-box': JSXElements.KenticoAlertBoxAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoAlertBoxAttributes extends HTMLAttributes {
      'message'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoDialogHeader {
      'backTooltip': string;
      'closeTooltip': string;
      'headerTitle': string;
      'showBackButton': boolean;
      'theme': Theme;
    }
  }

  interface HTMLKenticoDialogHeaderElement extends StencilComponents.KenticoDialogHeader, HTMLStencilElement {}

  var HTMLKenticoDialogHeaderElement: {
    prototype: HTMLKenticoDialogHeaderElement;
    new (): HTMLKenticoDialogHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-dialog-header': HTMLKenticoDialogHeaderElement;
  }
  interface ElementTagNameMap {
    'kentico-dialog-header': HTMLKenticoDialogHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-dialog-header': JSXElements.KenticoDialogHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoDialogHeaderAttributes extends HTMLAttributes {
      'backTooltip'?: string;
      'closeTooltip'?: string;
      'headerTitle'?: string;
      'onBack'?: (event: CustomEvent) => void;
      'onClose'?: (event: CustomEvent) => void;
      'showBackButton'?: boolean;
      'theme'?: Theme;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoDropMarker {

    }
  }

  interface HTMLKenticoDropMarkerElement extends StencilComponents.KenticoDropMarker, HTMLStencilElement {}

  var HTMLKenticoDropMarkerElement: {
    prototype: HTMLKenticoDropMarkerElement;
    new (): HTMLKenticoDropMarkerElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-drop-marker': HTMLKenticoDropMarkerElement;
  }
  interface ElementTagNameMap {
    'kentico-drop-marker': HTMLKenticoDropMarkerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-drop-marker': JSXElements.KenticoDropMarkerAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoDropMarkerAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoLoader {
      'delayed': boolean;
      'loaderMessage': string;
    }
  }

  interface HTMLKenticoLoaderElement extends StencilComponents.KenticoLoader, HTMLStencilElement {}

  var HTMLKenticoLoaderElement: {
    prototype: HTMLKenticoLoaderElement;
    new (): HTMLKenticoLoaderElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-loader': HTMLKenticoLoaderElement;
  }
  interface ElementTagNameMap {
    'kentico-loader': HTMLKenticoLoaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-loader': JSXElements.KenticoLoaderAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoLoaderAttributes extends HTMLAttributes {
      'delayed'?: boolean;
      'loaderMessage'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoModalDialog {
      'adjustDialogHeight': (wholeDialogHeight: number) => void;
      'configuration': ModalDialogConfiguration;
      'messages': ModalDialogMessages;
    }
  }

  interface HTMLKenticoModalDialogElement extends StencilComponents.KenticoModalDialog, HTMLStencilElement {}

  var HTMLKenticoModalDialogElement: {
    prototype: HTMLKenticoModalDialogElement;
    new (): HTMLKenticoModalDialogElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-modal-dialog': HTMLKenticoModalDialogElement;
  }
  interface ElementTagNameMap {
    'kentico-modal-dialog': HTMLKenticoModalDialogElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-modal-dialog': JSXElements.KenticoModalDialogAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoModalDialogAttributes extends HTMLAttributes {
      'configuration'?: ModalDialogConfiguration;
      'messages'?: ModalDialogMessages;
      'onApply'?: (event: CustomEvent) => void;
      'onClose'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoPopUpContainer {
      'headerTitle': string;
      'localizationService': LocalizationService;
      'position': string;
      'showBackButton': boolean;
      'theme': Theme;
    }
  }

  interface HTMLKenticoPopUpContainerElement extends StencilComponents.KenticoPopUpContainer, HTMLStencilElement {}

  var HTMLKenticoPopUpContainerElement: {
    prototype: HTMLKenticoPopUpContainerElement;
    new (): HTMLKenticoPopUpContainerElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-pop-up-container': HTMLKenticoPopUpContainerElement;
  }
  interface ElementTagNameMap {
    'kentico-pop-up-container': HTMLKenticoPopUpContainerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-pop-up-container': JSXElements.KenticoPopUpContainerAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoPopUpContainerAttributes extends HTMLAttributes {
      'headerTitle'?: string;
      'localizationService'?: LocalizationService;
      'onBackClick'?: (event: CustomEvent) => void;
      'onClosePopup'?: (event: CustomEvent) => void;
      'position'?: string;
      'showBackButton'?: boolean;
      'theme'?: Theme;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoPopUpListing {
      'activeItemIdentifier': string;
      'items': PopupListingElement[];
      'noItemsAvailableMessage': string;
      'singleColumn': boolean;
    }
  }

  interface HTMLKenticoPopUpListingElement extends StencilComponents.KenticoPopUpListing, HTMLStencilElement {}

  var HTMLKenticoPopUpListingElement: {
    prototype: HTMLKenticoPopUpListingElement;
    new (): HTMLKenticoPopUpListingElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-pop-up-listing': HTMLKenticoPopUpListingElement;
  }
  interface ElementTagNameMap {
    'kentico-pop-up-listing': HTMLKenticoPopUpListingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-pop-up-listing': JSXElements.KenticoPopUpListingAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoPopUpListingAttributes extends HTMLAttributes {
      'activeItemIdentifier'?: string;
      'items'?: PopupListingElement[];
      'noItemsAvailableMessage'?: string;
      'onSelectItem'?: (event: CustomEvent<PopupListingElement>) => void;
      'singleColumn'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoSectionDivider {
      'addTooltip': string;
      'showComponentList': boolean;
    }
  }

  interface HTMLKenticoSectionDividerElement extends StencilComponents.KenticoSectionDivider, HTMLStencilElement {}

  var HTMLKenticoSectionDividerElement: {
    prototype: HTMLKenticoSectionDividerElement;
    new (): HTMLKenticoSectionDividerElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-section-divider': HTMLKenticoSectionDividerElement;
  }
  interface ElementTagNameMap {
    'kentico-section-divider': HTMLKenticoSectionDividerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-section-divider': JSXElements.KenticoSectionDividerAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoSectionDividerAttributes extends HTMLAttributes {
      'addTooltip'?: string;
      'showComponentList'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoSectionHeader {
      'activeSectionTypeIdentifier': string;
      'localizationService': LocalizationService;
      'sectionTypeListPosition': string;
      'sectionTypeListTitleText': string;
      'sectionTypes': PopupListingElement[];
    }
  }

  interface HTMLKenticoSectionHeaderElement extends StencilComponents.KenticoSectionHeader, HTMLStencilElement {}

  var HTMLKenticoSectionHeaderElement: {
    prototype: HTMLKenticoSectionHeaderElement;
    new (): HTMLKenticoSectionHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-section-header': HTMLKenticoSectionHeaderElement;
  }
  interface ElementTagNameMap {
    'kentico-section-header': HTMLKenticoSectionHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-section-header': JSXElements.KenticoSectionHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoSectionHeaderAttributes extends HTMLAttributes {
      'activeSectionTypeIdentifier'?: string;
      'localizationService'?: LocalizationService;
      'onRemoveSection'?: (event: CustomEvent) => void;
      'onToggleSectionTypeList'?: (event: CustomEvent) => void;
      'sectionTypeListPosition'?: string;
      'sectionTypeListTitleText'?: string;
      'sectionTypes'?: PopupListingElement[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoMediaFilesFormComponent {
      'allowedExtensions': string;
      'getString': GetString;
      'inputName': string;
      'libraryName': string;
      'maxFilesLimit': number;
      'selectedData': string;
    }
  }

  interface HTMLKenticoMediaFilesFormComponentElement extends StencilComponents.KenticoMediaFilesFormComponent, HTMLStencilElement {}

  var HTMLKenticoMediaFilesFormComponentElement: {
    prototype: HTMLKenticoMediaFilesFormComponentElement;
    new (): HTMLKenticoMediaFilesFormComponentElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-media-files-form-component': HTMLKenticoMediaFilesFormComponentElement;
  }
  interface ElementTagNameMap {
    'kentico-media-files-form-component': HTMLKenticoMediaFilesFormComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-media-files-form-component': JSXElements.KenticoMediaFilesFormComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoMediaFilesFormComponentAttributes extends HTMLAttributes {
      'allowedExtensions'?: string;
      'getString'?: GetString;
      'inputName'?: string;
      'libraryName'?: string;
      'maxFilesLimit'?: number;
      'onKenticoPropertiesDialogInputInit'?: (event: CustomEvent<HTMLElement>) => void;
      'selectedData'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoMediaFilesMultipleFormComponent {
      'allowedExtensions': string;
      'getString': GetString;
      'libraryName': string;
      'maxFilesLimit': number;
      'selectValues': (files: MediaFile[]) => void;
      'selectedFiles': MediaFile[];
    }
  }

  interface HTMLKenticoMediaFilesMultipleFormComponentElement extends StencilComponents.KenticoMediaFilesMultipleFormComponent, HTMLStencilElement {}

  var HTMLKenticoMediaFilesMultipleFormComponentElement: {
    prototype: HTMLKenticoMediaFilesMultipleFormComponentElement;
    new (): HTMLKenticoMediaFilesMultipleFormComponentElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-media-files-multiple-form-component': HTMLKenticoMediaFilesMultipleFormComponentElement;
  }
  interface ElementTagNameMap {
    'kentico-media-files-multiple-form-component': HTMLKenticoMediaFilesMultipleFormComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-media-files-multiple-form-component': JSXElements.KenticoMediaFilesMultipleFormComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoMediaFilesMultipleFormComponentAttributes extends HTMLAttributes {
      'allowedExtensions'?: string;
      'getString'?: GetString;
      'libraryName'?: string;
      'maxFilesLimit'?: number;
      'selectValues'?: (files: MediaFile[]) => void;
      'selectedFiles'?: MediaFile[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoMediaFilesSingleFormComponent {
      'allowedExtensions': string;
      'getString': GetString;
      'libraryName': string;
      'selectValues': (files: MediaFile[]) => void;
      'selectedFile': MediaFile;
    }
  }

  interface HTMLKenticoMediaFilesSingleFormComponentElement extends StencilComponents.KenticoMediaFilesSingleFormComponent, HTMLStencilElement {}

  var HTMLKenticoMediaFilesSingleFormComponentElement: {
    prototype: HTMLKenticoMediaFilesSingleFormComponentElement;
    new (): HTMLKenticoMediaFilesSingleFormComponentElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-media-files-single-form-component': HTMLKenticoMediaFilesSingleFormComponentElement;
  }
  interface ElementTagNameMap {
    'kentico-media-files-single-form-component': HTMLKenticoMediaFilesSingleFormComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-media-files-single-form-component': JSXElements.KenticoMediaFilesSingleFormComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoMediaFilesSingleFormComponentAttributes extends HTMLAttributes {
      'allowedExtensions'?: string;
      'getString'?: GetString;
      'libraryName'?: string;
      'selectValues'?: (files: MediaFile[]) => void;
      'selectedFile'?: MediaFile;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoMediaFilesGrid {
      'filterQuery': string;
      'getString': GetString;
      'items': GridItem[];
      'selectedValues': MediaFilesSelectorItem[];
      'uploaderOptions': UploaderOptions;
    }
  }

  interface HTMLKenticoMediaFilesGridElement extends StencilComponents.KenticoMediaFilesGrid, HTMLStencilElement {}

  var HTMLKenticoMediaFilesGridElement: {
    prototype: HTMLKenticoMediaFilesGridElement;
    new (): HTMLKenticoMediaFilesGridElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-media-files-grid': HTMLKenticoMediaFilesGridElement;
  }
  interface ElementTagNameMap {
    'kentico-media-files-grid': HTMLKenticoMediaFilesGridElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-media-files-grid': JSXElements.KenticoMediaFilesGridAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoMediaFilesGridAttributes extends HTMLAttributes {
      'filterQuery'?: string;
      'getString'?: GetString;
      'items'?: GridItem[];
      'onChangeItem'?: (event: CustomEvent<{ value: string, remove: boolean }>) => void;
      'selectedValues'?: MediaFilesSelectorItem[];
      'uploaderOptions'?: UploaderOptions;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoMediaLibrarySelector {
      'getString': GetString;
      'items': SelectorItem[];
      'selectedValue': string;
    }
  }

  interface HTMLKenticoMediaLibrarySelectorElement extends StencilComponents.KenticoMediaLibrarySelector, HTMLStencilElement {}

  var HTMLKenticoMediaLibrarySelectorElement: {
    prototype: HTMLKenticoMediaLibrarySelectorElement;
    new (): HTMLKenticoMediaLibrarySelectorElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-media-library-selector': HTMLKenticoMediaLibrarySelectorElement;
  }
  interface ElementTagNameMap {
    'kentico-media-library-selector': HTMLKenticoMediaLibrarySelectorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-media-library-selector': JSXElements.KenticoMediaLibrarySelectorAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoMediaLibrarySelectorAttributes extends HTMLAttributes {
      'getString'?: GetString;
      'items'?: SelectorItem[];
      'onSelectItem'?: (event: CustomEvent<string>) => void;
      'selectedValue'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoMediaFiles {
      'allowedExtensions': string;
      'dataUrl': string;
      'getSelectedFiles': () => Promise<MediaFile[]>;
      'getString': GetString;
      'libraryName': string;
      'maxFilesLimit': number;
      'modelDataUrl': string;
      'selectorDataUrl': string;
      'treeDataUrl': string;
      'uploaderUrl': string;
      'values': MediaFilesSelectorItem[];
    }
  }

  interface HTMLKenticoMediaFilesElement extends StencilComponents.KenticoMediaFiles, HTMLStencilElement {}

  var HTMLKenticoMediaFilesElement: {
    prototype: HTMLKenticoMediaFilesElement;
    new (): HTMLKenticoMediaFilesElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-media-files': HTMLKenticoMediaFilesElement;
  }
  interface ElementTagNameMap {
    'kentico-media-files': HTMLKenticoMediaFilesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-media-files': JSXElements.KenticoMediaFilesAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoMediaFilesAttributes extends HTMLAttributes {
      'allowedExtensions'?: string;
      'dataUrl'?: string;
      'getString'?: GetString;
      'libraryName'?: string;
      'maxFilesLimit'?: number;
      'modelDataUrl'?: string;
      'selectorDataUrl'?: string;
      'treeDataUrl'?: string;
      'uploaderUrl'?: string;
      'values'?: MediaFilesSelectorItem[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoMediaFilesTree {
      'getString': GetString;
      'selectedPath': string;
      'treeStructure': TreeNode;
    }
  }

  interface HTMLKenticoMediaFilesTreeElement extends StencilComponents.KenticoMediaFilesTree, HTMLStencilElement {}

  var HTMLKenticoMediaFilesTreeElement: {
    prototype: HTMLKenticoMediaFilesTreeElement;
    new (): HTMLKenticoMediaFilesTreeElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-media-files-tree': HTMLKenticoMediaFilesTreeElement;
  }
  interface ElementTagNameMap {
    'kentico-media-files-tree': HTMLKenticoMediaFilesTreeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-media-files-tree': JSXElements.KenticoMediaFilesTreeAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoMediaFilesTreeAttributes extends HTMLAttributes {
      'getString'?: GetString;
      'onSelectNode'?: (event: CustomEvent<string>) => void;
      'selectedPath'?: string;
      'treeStructure'?: TreeNode;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoMediaFilesUploader {
      'getString': GetString;
      'uploaderOptions': UploaderOptions;
    }
  }

  interface HTMLKenticoMediaFilesUploaderElement extends StencilComponents.KenticoMediaFilesUploader, HTMLStencilElement {}

  var HTMLKenticoMediaFilesUploaderElement: {
    prototype: HTMLKenticoMediaFilesUploaderElement;
    new (): HTMLKenticoMediaFilesUploaderElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-media-files-uploader': HTMLKenticoMediaFilesUploaderElement;
  }
  interface ElementTagNameMap {
    'kentico-media-files-uploader': HTMLKenticoMediaFilesUploaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-media-files-uploader': JSXElements.KenticoMediaFilesUploaderAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoMediaFilesUploaderAttributes extends HTMLAttributes {
      'getString'?: GetString;
      'onUploadError'?: (event: CustomEvent<string>) => void;
      'onUploadSuccessful'?: (event: CustomEvent<string>) => void;
      'uploaderOptions'?: UploaderOptions;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoMessagesPlaceholder {
      'clear': () => void;
      'getString': GetString;
      'showError': (message: string) => void;
      'showSuccess': (message: string) => void;
    }
  }

  interface HTMLKenticoMessagesPlaceholderElement extends StencilComponents.KenticoMessagesPlaceholder, HTMLStencilElement {}

  var HTMLKenticoMessagesPlaceholderElement: {
    prototype: HTMLKenticoMessagesPlaceholderElement;
    new (): HTMLKenticoMessagesPlaceholderElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-messages-placeholder': HTMLKenticoMessagesPlaceholderElement;
  }
  interface ElementTagNameMap {
    'kentico-messages-placeholder': HTMLKenticoMessagesPlaceholderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-messages-placeholder': JSXElements.KenticoMessagesPlaceholderAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoMessagesPlaceholderAttributes extends HTMLAttributes {
      'getString'?: GetString;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoPageSelectorFormComponent {
      'getString': GetString;
      'inputName': string;
      'mode': IdentifierMode;
      'rootPath': string;
      'selectedPageData': string;
    }
  }

  interface HTMLKenticoPageSelectorFormComponentElement extends StencilComponents.KenticoPageSelectorFormComponent, HTMLStencilElement {}

  var HTMLKenticoPageSelectorFormComponentElement: {
    prototype: HTMLKenticoPageSelectorFormComponentElement;
    new (): HTMLKenticoPageSelectorFormComponentElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-page-selector-form-component': HTMLKenticoPageSelectorFormComponentElement;
  }
  interface ElementTagNameMap {
    'kentico-page-selector-form-component': HTMLKenticoPageSelectorFormComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-page-selector-form-component': JSXElements.KenticoPageSelectorFormComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoPageSelectorFormComponentAttributes extends HTMLAttributes {
      'getString'?: GetString;
      'inputName'?: string;
      'mode'?: IdentifierMode;
      'onKenticoPropertiesDialogInputInit'?: (event: CustomEvent<HTMLElement>) => void;
      'rootPath'?: string;
      'selectedPageData'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoMillerColumn {
      'column': MillerColumn<ListingItem>;
      'getString': GetString;
      'slide': boolean;
      'treeLevel': number;
    }
  }

  interface HTMLKenticoMillerColumnElement extends StencilComponents.KenticoMillerColumn, HTMLStencilElement {}

  var HTMLKenticoMillerColumnElement: {
    prototype: HTMLKenticoMillerColumnElement;
    new (): HTMLKenticoMillerColumnElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-miller-column': HTMLKenticoMillerColumnElement;
  }
  interface ElementTagNameMap {
    'kentico-miller-column': HTMLKenticoMillerColumnElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-miller-column': JSXElements.KenticoMillerColumnAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoMillerColumnAttributes extends HTMLAttributes {
      'column'?: MillerColumn<ListingItem>;
      'getString'?: GetString;
      'onLoad'?: (event: CustomEvent) => void;
      'onSelect'?: (event: CustomEvent<SelectItemEventDetail>) => void;
      'slide'?: boolean;
      'treeLevel'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoMillerColumns {
      'columns': Array<MillerColumn<ListingItem>>;
      'getString': GetString;
    }
  }

  interface HTMLKenticoMillerColumnsElement extends StencilComponents.KenticoMillerColumns, HTMLStencilElement {}

  var HTMLKenticoMillerColumnsElement: {
    prototype: HTMLKenticoMillerColumnsElement;
    new (): HTMLKenticoMillerColumnsElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-miller-columns': HTMLKenticoMillerColumnsElement;
  }
  interface ElementTagNameMap {
    'kentico-miller-columns': HTMLKenticoMillerColumnsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-miller-columns': JSXElements.KenticoMillerColumnsAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoMillerColumnsAttributes extends HTMLAttributes {
      'columns'?: Array<MillerColumn<ListingItem>>;
      'getString'?: GetString;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoPageSelector {
      'aliasPathEndpoint': string;
      'dataEndpoint': string;
      'getSelectedPage': () => SelectedPage;
      'getString': GetString;
      'identifierMode': IdentifierMode;
      'rootPage': TreeNode;
      'selectedValues': SelectedValue[];
    }
  }

  interface HTMLKenticoPageSelectorElement extends StencilComponents.KenticoPageSelector, HTMLStencilElement {}

  var HTMLKenticoPageSelectorElement: {
    prototype: HTMLKenticoPageSelectorElement;
    new (): HTMLKenticoPageSelectorElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-page-selector': HTMLKenticoPageSelectorElement;
  }
  interface ElementTagNameMap {
    'kentico-page-selector': HTMLKenticoPageSelectorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-page-selector': JSXElements.KenticoPageSelectorAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoPageSelectorAttributes extends HTMLAttributes {
      'aliasPathEndpoint'?: string;
      'dataEndpoint'?: string;
      'getString'?: GetString;
      'identifierMode'?: IdentifierMode;
      'rootPage'?: TreeNode;
      'selectedValues'?: SelectedValue[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoWidgetHeader {
      'localizationService': LocalizationService;
      'widgetTitle': string;
    }
  }

  interface HTMLKenticoWidgetHeaderElement extends StencilComponents.KenticoWidgetHeader, HTMLStencilElement {}

  var HTMLKenticoWidgetHeaderElement: {
    prototype: HTMLKenticoWidgetHeaderElement;
    new (): HTMLKenticoWidgetHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-widget-header': HTMLKenticoWidgetHeaderElement;
  }
  interface ElementTagNameMap {
    'kentico-widget-header': HTMLKenticoWidgetHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-widget-header': JSXElements.KenticoWidgetHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoWidgetHeaderAttributes extends HTMLAttributes {
      'localizationService'?: LocalizationService;
      'onRemoveWidget'?: (event: CustomEvent) => void;
      'widgetTitle'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoFormModalDialog {
      'componentName': string;
      'formMarkup': string;
      'isValid': boolean;
      'localizationService': LocalizationService;
      'openedDialogsCount': number;
      'theme': Theme;
    }
  }

  interface HTMLKenticoFormModalDialogElement extends StencilComponents.KenticoFormModalDialog, HTMLStencilElement {}

  var HTMLKenticoFormModalDialogElement: {
    prototype: HTMLKenticoFormModalDialogElement;
    new (): HTMLKenticoFormModalDialogElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-form-modal-dialog': HTMLKenticoFormModalDialogElement;
  }
  interface ElementTagNameMap {
    'kentico-form-modal-dialog': HTMLKenticoFormModalDialogElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-form-modal-dialog': JSXElements.KenticoFormModalDialogAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoFormModalDialogAttributes extends HTMLAttributes {
      'componentName'?: string;
      'formMarkup'?: string;
      'isValid'?: boolean;
      'localizationService'?: LocalizationService;
      'onCloseModalDialog'?: (event: CustomEvent) => void;
      'onSubmitPropertiesForm'?: (event: CustomEvent) => void;
      'openedDialogsCount'?: number;
      'theme'?: Theme;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoHeaderButton {
      'buttonTooltip': string;
      'icon': ButtonIcon;
    }
  }

  interface HTMLKenticoHeaderButtonElement extends StencilComponents.KenticoHeaderButton, HTMLStencilElement {}

  var HTMLKenticoHeaderButtonElement: {
    prototype: HTMLKenticoHeaderButtonElement;
    new (): HTMLKenticoHeaderButtonElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-header-button': HTMLKenticoHeaderButtonElement;
  }
  interface ElementTagNameMap {
    'kentico-header-button': HTMLKenticoHeaderButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-header-button': JSXElements.KenticoHeaderButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoHeaderButtonAttributes extends HTMLAttributes {
      'buttonTooltip'?: string;
      'icon'?: ButtonIcon;
      'onButtonClick'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoPersonalizationButton {
      'activeItemIdentifier': string;
      'addVariant': any;
      'builderConfig': BuilderConfig;
      'changeVariantsPriority': any;
      'conditionType': string;
      'deleteVariant': any;
      'httpClient': AxiosInstance;
      'localizationService': LocalizationService;
      'personalizationConditionTypes': Entities<PersonalizationConditionTypeMetadata>;
      'personalizationPopupPosition': ComponentPosition;
      'popupItems': PopupListingElement[];
      'selectVariant': any;
      'showPersonalizationPopup': boolean;
      'updateVariant': any;
    }
  }

  interface HTMLKenticoPersonalizationButtonElement extends StencilComponents.KenticoPersonalizationButton, HTMLStencilElement {}

  var HTMLKenticoPersonalizationButtonElement: {
    prototype: HTMLKenticoPersonalizationButtonElement;
    new (): HTMLKenticoPersonalizationButtonElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-personalization-button': HTMLKenticoPersonalizationButtonElement;
  }
  interface ElementTagNameMap {
    'kentico-personalization-button': HTMLKenticoPersonalizationButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-personalization-button': JSXElements.KenticoPersonalizationButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoPersonalizationButtonAttributes extends HTMLAttributes {
      'activeItemIdentifier'?: string;
      'addVariant'?: any;
      'builderConfig'?: BuilderConfig;
      'changeVariantsPriority'?: any;
      'conditionType'?: string;
      'deleteVariant'?: any;
      'httpClient'?: AxiosInstance;
      'localizationService'?: LocalizationService;
      'onClosePersonalizationPopup'?: (event: CustomEvent<void>) => void;
      'onOpenPersonalizationPopup'?: (event: CustomEvent<void>) => void;
      'personalizationConditionTypes'?: Entities<PersonalizationConditionTypeMetadata>;
      'personalizationPopupPosition'?: ComponentPosition;
      'popupItems'?: PopupListingElement[];
      'selectVariant'?: any;
      'showPersonalizationPopup'?: boolean;
      'updateVariant'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoPersonalizationConfiguration {
      'addVariant': (variantName: string, conditionType: string, conditionTypeParameters: object) => void;
      'builderConfig': BuilderConfig;
      'configurationLoaded': () => void;
      'httpClient': AxiosInstance;
      'localizationService': LocalizationService;
      'personalizationConditionTypes': Entities<PersonalizationConditionTypeMetadata>;
      'selectedConditionType': string;
      'updateVariant': (variantName: string, conditionTypeParameters: object, variantIdentifier: string) => void;
      'variantIdentifier': string;
      'variantName': string;
      'variantParameters': object;
    }
  }

  interface HTMLKenticoPersonalizationConfigurationElement extends StencilComponents.KenticoPersonalizationConfiguration, HTMLStencilElement {}

  var HTMLKenticoPersonalizationConfigurationElement: {
    prototype: HTMLKenticoPersonalizationConfigurationElement;
    new (): HTMLKenticoPersonalizationConfigurationElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-personalization-configuration': HTMLKenticoPersonalizationConfigurationElement;
  }
  interface ElementTagNameMap {
    'kentico-personalization-configuration': HTMLKenticoPersonalizationConfigurationElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-personalization-configuration': JSXElements.KenticoPersonalizationConfigurationAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoPersonalizationConfigurationAttributes extends HTMLAttributes {
      'addVariant'?: (variantName: string, conditionType: string, conditionTypeParameters: object) => void;
      'builderConfig'?: BuilderConfig;
      'configurationLoaded'?: () => void;
      'httpClient'?: AxiosInstance;
      'localizationService'?: LocalizationService;
      'personalizationConditionTypes'?: Entities<PersonalizationConditionTypeMetadata>;
      'selectedConditionType'?: string;
      'updateVariant'?: (variantName: string, conditionTypeParameters: object, variantIdentifier: string) => void;
      'variantIdentifier'?: string;
      'variantName'?: string;
      'variantParameters'?: object;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoSubmitButton {
      'buttonStyle': string;
      'buttonText': string;
      'buttonTooltip': string;
      'disabled': boolean;
    }
  }

  interface HTMLKenticoSubmitButtonElement extends StencilComponents.KenticoSubmitButton, HTMLStencilElement {}

  var HTMLKenticoSubmitButtonElement: {
    prototype: HTMLKenticoSubmitButtonElement;
    new (): HTMLKenticoSubmitButtonElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-submit-button': HTMLKenticoSubmitButtonElement;
  }
  interface ElementTagNameMap {
    'kentico-submit-button': HTMLKenticoSubmitButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-submit-button': JSXElements.KenticoSubmitButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoSubmitButtonAttributes extends HTMLAttributes {
      'buttonStyle'?: string;
      'buttonText'?: string;
      'buttonTooltip'?: string;
      'disabled'?: boolean;
      'onButtonClick'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoAbtestVariantListing {
      'actionDisabledTitle': string;
      'activeItemIdentifier': string;
      'closeEditor': () => void;
      'editActionIconTitle': string;
      'maximumNameLength': number;
      'removeActionIconTitle': string;
      'removeConfirmationMessage': string;
      'removeVariant': (variantIdentifier: string) => void;
      'renameVariant': (variant: AbTestVariantListingElement) => void;
      'selectVariant': (variant: AbTestVariantListingElement) => void;
      'variants': AbTestVariantListingElement[];
    }
  }

  interface HTMLKenticoAbtestVariantListingElement extends StencilComponents.KenticoAbtestVariantListing, HTMLStencilElement {}

  var HTMLKenticoAbtestVariantListingElement: {
    prototype: HTMLKenticoAbtestVariantListingElement;
    new (): HTMLKenticoAbtestVariantListingElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-abtest-variant-listing': HTMLKenticoAbtestVariantListingElement;
  }
  interface ElementTagNameMap {
    'kentico-abtest-variant-listing': HTMLKenticoAbtestVariantListingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-abtest-variant-listing': JSXElements.KenticoAbtestVariantListingAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoAbtestVariantListingAttributes extends HTMLAttributes {
      'actionDisabledTitle'?: string;
      'activeItemIdentifier'?: string;
      'editActionIconTitle'?: string;
      'maximumNameLength'?: number;
      'removeActionIconTitle'?: string;
      'removeConfirmationMessage'?: string;
      'removeVariant'?: (variantIdentifier: string) => void;
      'renameVariant'?: (variant: AbTestVariantListingElement) => void;
      'selectVariant'?: (variant: AbTestVariantListingElement) => void;
      'variants'?: AbTestVariantListingElement[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface KenticoVariantListing {
      'activeItemIdentifier': string;
      'changeVariantsPriority': (variants: string[]) => void;
      'deleteVariant': (variantIdentifier: string) => void;
      'editVariant': (variant: VariantListingElement) => void;
      'localizationService': LocalizationService;
      'selectVariant': (variant: VariantListingElement) => void;
      'variants': VariantListingElement[];
    }
  }

  interface HTMLKenticoVariantListingElement extends StencilComponents.KenticoVariantListing, HTMLStencilElement {}

  var HTMLKenticoVariantListingElement: {
    prototype: HTMLKenticoVariantListingElement;
    new (): HTMLKenticoVariantListingElement;
  };
  interface HTMLElementTagNameMap {
    'kentico-variant-listing': HTMLKenticoVariantListingElement;
  }
  interface ElementTagNameMap {
    'kentico-variant-listing': HTMLKenticoVariantListingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'kentico-variant-listing': JSXElements.KenticoVariantListingAttributes;
    }
  }
  namespace JSXElements {
    export interface KenticoVariantListingAttributes extends HTMLAttributes {
      'activeItemIdentifier'?: string;
      'changeVariantsPriority'?: (variants: string[]) => void;
      'deleteVariant'?: (variantIdentifier: string) => void;
      'editVariant'?: (variant: VariantListingElement) => void;
      'localizationService'?: LocalizationService;
      'selectVariant'?: (variant: VariantListingElement) => void;
      'variants'?: VariantListingElement[];
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;