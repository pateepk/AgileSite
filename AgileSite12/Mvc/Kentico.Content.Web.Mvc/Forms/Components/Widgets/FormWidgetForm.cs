using System;
using System.Linq;
using System.Web.Mvc;
using System.Web.Routing;

using CMS.Base;
using CMS.Helpers;

using Kentico.Forms.Web.Mvc.Internal;
using Kentico.Web.Mvc;

namespace Kentico.Forms.Web.Mvc.Widgets.Internal
{
    /// <summary>
    /// Represents a form element used in Forms widget.
    /// </summary>
    public sealed class FormWidgetForm : IDisposable
    {
        private readonly UpdatableMvcForm form;
        private readonly ExtensionPoint<HtmlHelper> htmlHelper;
        private readonly FormWidgetRenderingConfiguration renderingConfiguration;
        private readonly Func<HtmlHelper, string> antiForgeryTokenRenderer;
        private readonly Guid? mUpdateTargetGuid;
        private readonly string mFormId;

        private bool disposed;


        // Indicates whether AntiForgery token should be generated by the system. This key is introduced for emergency purposes.
        private static bool UseKenticoAntiForgery => ValidationHelper.GetBoolean(SettingsHelper.AppSettings["CMSUseKenticoAntiForgery"], true);


        // Returns AntiForgery generator method
        private static Func<HtmlHelper, string> GetAntiForgeryMethod()
        {
            if (UseKenticoAntiForgery)
            {
                return (htmlHelp) => htmlHelp.Kentico().AntiForgeryToken().ToString();
            }

            return (htmlHelp) => htmlHelp.AntiForgeryToken().ToString();
        }


        /// <summary>
        /// Creates new instance of <see cref="FormWidgetForm"/>.
        /// </summary>
        /// <param name="htmlHelper">HtmlHelper extension point.</param>
        /// <param name="model">Form widget model.</param>
        /// <exception cref="InvalidOperationException">Thrown when <see cref="FormWrapperRenderingConfiguration.CustomHtmlEnvelope"/> is used but <see cref="FormWrapperRenderingConfiguration.CONTENT_PLACEHOLDER" /> is missing.</exception>
        public FormWidgetForm(ExtensionPoint<HtmlHelper> htmlHelper, FormWidgetViewModel model)
            : this(htmlHelper, model, null, GetAntiForgeryMethod(), null, model.FormPrefix)
        {
        }


        /// <summary>
        /// Creates new instance of <see cref="FormWidgetForm"/> for testing purposes.
        /// </summary>
        internal FormWidgetForm(ExtensionPoint<HtmlHelper> htmlHelper, FormWidgetViewModel model, FormWidgetRenderingConfiguration renderingConfiguration, Func<HtmlHelper, string> antiForgeryTokenRenderer, Guid? updateTargetGuid, string formId)
        {
            if (model.FormComponents != null && model.FormComponents.Any())
            {
                this.htmlHelper = htmlHelper;
                this.renderingConfiguration = renderingConfiguration ?? this.htmlHelper.Target.ViewData.GetFormWidgetRenderingConfiguration();
                this.antiForgeryTokenRenderer = antiForgeryTokenRenderer;
                mUpdateTargetGuid = updateTargetGuid;
                mFormId = formId;

                form = CreateForm(model);
            }
        }


        internal Guid UpdateTargetGuid
        {
            get { return mUpdateTargetGuid ?? Guid.NewGuid(); }
        }


        internal string FormId
        {
            get { return mFormId ?? Guid.NewGuid().ToString(); }
        }


        /// <summary>
        /// Releases all resources that are used by the current instance of the <see cref="FormWidgetForm"/> class.
        /// </summary>
        public void Dispose()
        {
            if (!disposed)
            {
                disposed = true;

                if (form != null)
                {
                    RenderAntiForgeryToken();
                    form.Dispose();
                    EndWrappingElement();
                }
            }
        }


        private UpdatableMvcForm CreateForm(FormWidgetViewModel model)
        {
            var updateTargetId = $"{htmlHelper.Target.ViewData.TemplateInfo.GetFullHtmlFieldId("wrapper")}-{UpdateTargetGuid}";

            var updateTargetIdSetInWrapper = BeginWrappingElement(updateTargetId);

            var routeValues = new RouteValueDictionary { { "formName", model.FormName }, { "prefix", model.FormPrefix }, };

            var formId = updateTargetIdSetInWrapper ? FormId : updateTargetId;
            return htmlHelper.BeginUpdatableForm(formId, updateTargetId, "FormSubmit", "KenticoFormWidget", routeValues, renderingConfiguration?.FormHtmlAttributes);
        }


        private void RenderAntiForgeryToken()
        {
            htmlHelper.Target.ViewContext.Writer.Write(antiForgeryTokenRenderer(htmlHelper.Target));
        }


        private bool BeginWrappingElement(string updateTargetId)
        {
            var formWrapperConfiguration = renderingConfiguration?.FormWrapperConfiguration;

            BeginCustomHtmEnvelope(formWrapperConfiguration);

            if (String.IsNullOrWhiteSpace(formWrapperConfiguration?.Configuration?.ElementName))
            {
                return false;
            }

            var formConfigurationClone = renderingConfiguration.FormWrapperConfiguration.Configuration.Copy();
            formConfigurationClone.HtmlAttributes["id"] = updateTargetId;

            var wrappingElements = htmlHelper.BeginWrappingElement(formConfigurationClone);

            htmlHelper.Target.ViewContext.Writer.Write(wrappingElements.ToString());

            return true;
        }


        private void EndWrappingElement()
        {
            var formWrapperConfiguration = renderingConfiguration?.FormWrapperConfiguration;

            var endWrappingElements = htmlHelper.EndWrappingElement(formWrapperConfiguration?.Configuration);
            htmlHelper.Target.ViewContext.Writer.Write(endWrappingElements.ToString());

            EndCustomHtmlEnvelope(formWrapperConfiguration);
        }


        private void BeginCustomHtmEnvelope(FormWrapperRenderingConfiguration configuration)
        {
            if (CanRenderCustomHtmlEnvelope(configuration, out var customHtmlEnvelope, out var placeholderIndex))
            {
                htmlHelper.Target.ViewContext.Writer.Write(customHtmlEnvelope.Substring(0, placeholderIndex));
            }
        }


        private void EndCustomHtmlEnvelope(FormWrapperRenderingConfiguration configuration)
        {
            if (CanRenderCustomHtmlEnvelope(configuration, out var customHtmlEnvelope, out var placeholderIndex))
            {
                htmlHelper.Target.ViewContext.Writer.Write(customHtmlEnvelope.Substring(placeholderIndex + FormWrapperRenderingConfiguration.CONTENT_PLACEHOLDER.Length));
            }
        }


        private bool CanRenderCustomHtmlEnvelope(FormWrapperRenderingConfiguration configuration, out string customHtmlEnvelope, out int placeholderIndex)
        {
            placeholderIndex = -1;
            customHtmlEnvelope = String.Empty;

            if (htmlHelper.Target?.ViewData?.IsFormSubmit() == true)
            {
                return false;
            }

            customHtmlEnvelope = configuration?.CustomHtmlEnvelope?.ToHtmlString();
            if (String.IsNullOrWhiteSpace(customHtmlEnvelope))
            {
                return false;
            }

            placeholderIndex = customHtmlEnvelope.IndexOf(FormWrapperRenderingConfiguration.CONTENT_PLACEHOLDER, StringComparison.Ordinal);
            if (placeholderIndex < 0)
            {
                throw new InvalidOperationException($"{typeof(FormWrapperRenderingConfiguration).FullName}.{nameof(FormWrapperRenderingConfiguration.CONTENT_PLACEHOLDER)} is missing from the {nameof(FormWrapperRenderingConfiguration.CustomHtmlEnvelope)} property.");
            }

            return true;
        }
    }
}

