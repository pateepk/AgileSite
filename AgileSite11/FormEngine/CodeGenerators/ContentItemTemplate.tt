<#@ template debug="true" hostspecific="false" language="C#" linePragmas="false" visibility="internal" #>
<#@ output extension="cs" encoding="UTF-8" #>
//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at http://docs.kentico.com.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using <#= Namespace #>;
<#
foreach (String us in mClassUsings)
{
#>
using <#= us #>;
<#
}
#>

[assembly: <#= mAssemblyRegisterName #>(<#= ItemTypeName #>.CLASS_NAME, typeof(<#= ItemTypeName #>))]

namespace <#= Namespace #>
{
	/// <summary>
	/// Represents a content item of type <#= ItemTypeName #>.
	/// </summary>
	public partial class <#= ItemTypeName #> : <#= mBaseClassType.Name #>
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "<#= mItemClassName #>";


		/// <summary>
		/// The instance of the class that provides extended API for working with <#= ItemTypeName #> fields.
		/// </summary>
		private readonly <#= ItemTypeName #>Fields mFields;
<# if (IsProduct) 
{ 
#>


		/// <summary>
		/// The instance of the class that provides extended API for working with SKU fields.
		/// </summary>
		private readonly ProductFields mProduct;
<# 
} 
#>

		#endregion


		#region "Properties"
<#
foreach (var field in Fields)
{
	if (field.DataType == CMS.DataEngine.FieldDataType.DocRelationships)
	{
		continue;
	}
#>

		/// <summary>
		/// <#= GetSummary(field, 2) #>
		/// </summary>
<# if (!field.IsDummyField) { #>
		<#= (field.PrimaryKey ? "[DatabaseIDField]" : "[DatabaseField]") #>
<# } #>
		public <#= GetDataType(field) #> <#= GetPropertyName(field) #>
		{
			get
			{
				return ValidationHelper.<#= GetValidationHelperMethodName(field.DataType) #>(GetValue("<#= field.Name #>"), <#= GetDefaultValue(field) #>);
			}
			set
			{
				SetValue("<#= field.Name #>", value);
			}
		}

<#
}
#>

		/// <summary>
		/// Gets an object that provides extended API for working with <#= ItemTypeName #> fields.
		/// </summary>
		[RegisterProperty]
		public <#= ItemTypeName #>Fields Fields
		{
			get
			{
				return mFields;
			}
		}
<# 
if (IsProduct) 
{
#>


		/// <summary>
		/// Gets an object that provides extended API for working with SKU fields.
		/// </summary>
        [RegisterProperty]
		public ProductFields Product
		{
			get
			{
				return mProduct;
			}
		}
<#
}
#>


		/// <summary>
		/// Provides extended API for working with <#= ItemTypeName #> fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class <#= ItemTypeName #>Fields : AbstractHierarchicalObject<<#= ItemTypeName #>Fields>
		{
			/// <summary>
			/// The content item of type <#= ItemTypeName #> that is a target of the extended API.
			/// </summary>
			private readonly <#= ItemTypeName #> mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="<#= ItemTypeName #>Fields" /> class with the specified content item of type <#= ItemTypeName #>.
			/// </summary>
			/// <param name="instance">The content item of type <#= ItemTypeName #> that is a target of the extended API.</param>
			public <#= ItemTypeName #>Fields(<#= ItemTypeName #> instance)
			{
				mInstance = instance;
			}
<#
foreach (var field in Fields)
{
	if (field.DataType == CMS.DataEngine.FieldDataType.File)
	{
#>


			/// <summary>
			/// <#= GetSummary(field) #>
			/// </summary>
			public Attachment <#= GetNestedPropertyName(field) #>
			{
				get
				{
					return mInstance.GetFieldAttachment("<#= field.Name #>");
				}
			}
<#
	}
	else if (field.DataType == CMS.DataEngine.FieldDataType.DocAttachments)
	{
#>


			/// <summary>
			/// <#= GetSummary(field) #>
			/// </summary>
			public IEnumerable<Attachment> <#= GetNestedPropertyName(field) #>
			{
				get
				{
					return mInstance.GetFieldAttachments("<#= field.Name #>");
				}
			}
<#
	}
	else if (field.DataType == CMS.DataEngine.FieldDataType.DocRelationships)
	{
#>


			/// <summary>
			/// <#= GetSummary(field) #>
			/// </summary>
			public IEnumerable<TreeNode> <#= GetNestedPropertyName(field) #>
			{
				get
				{
					return mInstance.GetRelatedDocuments("<#= field.Name #>");
				}
			}
<#
	}
	else
	{
#>


			/// <summary>
			/// <#= GetSummary(field) #>
			/// </summary>
			public <#= GetDataType(field) #> <#= GetNestedPropertyName(field) #>
			{
				get
				{
					return mInstance.<#= GetPropertyName(field) #>;
				}
				set
				{
					mInstance.<#= GetPropertyName(field) #> = value;
				}
			}
<#
	}
}
#>
		}
<#
if (IsProduct)
{
#>


		/// <summary>
		/// Provides extended API for working with SKU fields.
		/// </summary>
        [RegisterAllProperties]
		public class ProductFields : AbstractHierarchicalObject<ProductFields>
		{
		    /// <summary>
			/// The content item of type <see cref="<#= ItemTypeName #>" /> that is a target of the extended API.
			/// </summary>
			private readonly <#= ItemTypeName #> mInstance;


			/// <summary>
			/// The <see cref="PublicStatusInfo" /> object related to product based on value of <see cref="SKUInfo.SKUPublicStatusID" /> column. 
			/// </summary>
			private PublicStatusInfo mPublicStatus = null;


			/// <summary>
			/// The <see cref="ManufacturerInfo" /> object related to product based on value of <see cref="SKUInfo.SKUManufacturerID" /> column. 
			/// </summary>
			private ManufacturerInfo mManufacturer = null;


			/// <summary>
			/// The <see cref="DepartmentInfo" /> object related to product based on value of <see cref="SKUInfo.SKUDepartmentID" /> column. 
			/// </summary>
			private DepartmentInfo mDepartment = null;


			/// <summary>
			/// The <see cref="SupplierInfo" /> object related to product based on value of <see cref="SKUInfo.SKUSupplierID" /> column. 
			/// </summary>
			private SupplierInfo mSupplier = null;


			/// <summary>
			/// The <see cref="TaxClassInfo" /> object related to product based on value of <see cref="SKUInfo.SKUTaxClassID" /> column. 
			/// </summary>
			private TaxClassInfo mTaxClass = null;


			/// <summary>
			/// The <see cref="BrandInfo" /> object related to product based on value of <see cref="SKUInfo.SKUBrandID" /> column. 
			/// </summary>
			private BrandInfo mBrand = null;


			/// <summary>
			/// The <see cref="CollectionInfo" /> object related to product based on value of <see cref="SKUInfo.SKUCollectionID" /> column. 
			/// </summary>
			private CollectionInfo mCollection = null;


			/// <summary>
			/// The shortcut to <see cref="SKUInfo" /> object which is a target of this extended API.
			/// </summary>
			private SKUInfo SKU
			{
				get 
				{
					return mInstance.SKU;
				}
			}

						
			/// <summary>
			/// Initializes a new instance of the <see cref="ProductFields" /> class with SKU related fields of type <see cref="<#= ItemTypeName #>" /> .
			/// </summary>
			/// <param name="instance">The content item of type <#= ItemTypeName #> that is a target of the extended API.</param>
			public ProductFields(<#= ItemTypeName #> instance)
			{
				mInstance = instance;
			}
<# 
	foreach (var field in SystemSKUFields)
	{		
#>


			/// <summary>
			/// <#= GetSummary(field) #>
			/// </summary>
			public <#= GetDataType(field) #> <#= GetSKUNestedPropertyName(field) #>
			{
				get
				{
					return (SKU != null) ? SKU.<#= GetSKUPropertyName(field) #> : <#= GetDefaultValue(field) #>;
				}
				set
				{
					if (SKU != null)
					{
						SKU.<#= GetSKUPropertyName(field) #> = value;
					}
				}
			}
<#
	}
#>


			/// <summary>
			/// Gets <see cref="PublicStatusInfo" /> object based on value of <see cref="SKUInfo.SKUPublicStatusID" /> column. 
			/// </summary>
			public PublicStatusInfo PublicStatus
			{	
				get
				{
					if (SKU == null)
					{
						return null;
					}

					var id = SKU.SKUPublicStatusID;

				    if ((mPublicStatus == null) && (id > 0))
				    {
                        mPublicStatus = PublicStatusInfoProvider.GetPublicStatusInfo(id);
				    }

				    return mPublicStatus;
				}
			}


			/// <summary>
			/// Gets <see cref="ManufacturerInfo" /> object based on value of <see cref="SKUInfo.SKUManufacturerID" /> column. 
			/// </summary>
			public ManufacturerInfo Manufacturer
			{	
				get
				{
					if (SKU == null)
					{
						return null;
					}

					var id = SKU.SKUManufacturerID;

				    if ((mManufacturer == null) && (id > 0))
				    {
                        mManufacturer = ManufacturerInfoProvider.GetManufacturerInfo(id);
				    }

				    return mManufacturer;
				}
			}


			/// <summary>
			/// Gets <see cref="DepartmentInfo" /> object based on value of <see cref="SKUInfo.SKUDepartmentID" /> column. 
			/// </summary>
			public DepartmentInfo Department
			{	
				get
				{
					if (SKU == null)
					{
						return null;
					}

				    var id = SKU.SKUDepartmentID;

				    if ((mDepartment == null) && (id > 0))
				    {
				        mDepartment = DepartmentInfoProvider.GetDepartmentInfo(id);
                    }

					return mDepartment;
				}
			}


			/// <summary>
			/// Gets <see cref="SupplierInfo" /> object based on value of <see cref="SKUInfo.SKUSupplierID" /> column. 
			/// </summary>
			public SupplierInfo Supplier
			{	
				get
				{
					if (SKU == null)
					{
						return null;
					}

					var id = SKU.SKUSupplierID;

				    if ((mSupplier == null) && (id > 0))
				    {
                        mSupplier = SupplierInfoProvider.GetSupplierInfo(id);
                    }

				    return mSupplier;
				}
			}


			/// <summary>
			/// Gets <see cref="TaxClassInfo" /> object based on value of <see cref="SKUInfo.SKUTaxClassID" /> column. 
			/// </summary>
			public TaxClassInfo TaxClass
			{	
				get
				{
					if (SKU == null)
					{
						return null;
					}

					var id = SKU.SKUTaxClassID;

				    if ((mTaxClass == null) && (id > 0))
				    {
						mTaxClass = TaxClassInfoProvider.GetTaxClassInfo(id);
				    }
				    
				    return mTaxClass;
				}
			}


			/// <summary>
			/// Gets <see cref="BrandInfo" /> object based on value of <see cref="SKUInfo.SKUBrandID" /> column. 
			/// </summary>
			public BrandInfo Brand
			{	
				get
				{
					if (SKU == null)
					{
						return null;
					}

					var id = SKU.SKUBrandID;

					if ((mBrand == null) && (id > 0))
					{
						mBrand = BrandInfoProvider.GetBrandInfo(id);
					}

					return mBrand;
				}
			}


			/// <summary>
			/// Gets <see cref="CollectionInfo" /> object based on value of <see cref="SKUInfo.SKUCollectionID" /> column. 
			/// </summary>
			public CollectionInfo Collection
			{	
				get
				{
					if (SKU == null)
					{
						return null;
					}

					var id = SKU.SKUCollectionID;

					if ((mCollection == null) && (id > 0))
					{
						mCollection = CollectionInfoProvider.GetCollectionInfo(id);
					}

					return mCollection;
				}
			}


			/// <summary>
			/// Localized name of product.
			/// </summary>
			public string Name
			{
				get
				{
					return mInstance.DocumentSKUName;
				}
				set
				{
					mInstance.DocumentSKUName = value;
				}
			}


			/// <summary>
			/// Localized description of product.
			/// </summary>
			public string Description
			{
				get
				{
					return mInstance.DocumentSKUDescription;
				}
				set
				{
					mInstance.DocumentSKUDescription = value;
				}
			}


			/// <summary>
			/// Localized short description of product.
			/// </summary>
			public string ShortDescription
			{
				get
				{
					return mInstance.DocumentSKUShortDescription;
				}
				set
				{
					mInstance.DocumentSKUShortDescription = value;
				}
			}
<#
	foreach (var field in CustomSKUFields)
	{
#>


			/// <summary>
			/// <#= GetSummary(field) #>
			/// </summary>
			public <#= GetDataType(field) #> <#= GetSKUNestedPropertyName(field) #>
			{
				get
				{
					if (SKU == null)
					{
						return <#= GetDefaultValue(field) #>;
					}

					return ValidationHelper.<#= GetValidationHelperMethodName(field.DataType) #>(SKU.GetValue("<#= field.Name #>"), <#= GetDefaultValue(field) #>);
				}
				set
				{
					if (SKU != null)
					{
						SKU.SetValue("<#= field.Name #>", value);
					}
				}
			}
<#
	}
#>
		}
<#
}
#>

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="<#= ItemTypeName #>" /> class.
		/// </summary>
		public <#= ItemTypeName #>() : base(CLASS_NAME)
		{
			mFields = new <#= ItemTypeName #>Fields(this);
<# 
if (IsProduct) 
{ 
#>
			mProduct = new ProductFields(this);
<#
}
#>
		}

		#endregion
	}
}