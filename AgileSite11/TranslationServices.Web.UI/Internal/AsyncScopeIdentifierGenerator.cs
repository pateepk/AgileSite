using System;
using System.Security.Cryptography;
using System.Text;

namespace CMS.TranslationServices.Web.UI.Internal
{
    /// <summary>
    /// Encapsulates generation of scope identifiers based on general scope descriptor.
    /// </summary>
    public class AsyncScopeIdentifierGenerator
    {
        // The version 3 or 5 UUID is meant for generating UUIDs from "names"
        // that are drawn from, and unique within, some "name space".
        // Version 3 indicates that UUID was generated using MD algorithm.
        private const int UUID_VERSION = 0x03;

        private readonly string mScopeDescriptor;


        /// <summary>
        /// Creates an instance of the <see cref="AsyncScopeIdentifierGenerator"/> class.
        /// </summary>
        /// <param name="scopeDescriptor">Descriptor of an asynchronous scope.</param>
        public AsyncScopeIdentifierGenerator(string scopeDescriptor)
        {
            if (scopeDescriptor == null)
            {
                throw new ArgumentNullException("scopeDescriptor");
            }

            if (string.IsNullOrWhiteSpace(scopeDescriptor))
            {
                throw new ArgumentException("Descriptor cannot be empty.", "scopeDescriptor");
            }

            mScopeDescriptor = scopeDescriptor;
        }


        /// <summary>
        /// Returns unique identifier based on the scope descriptor.
        /// </summary>
        public Guid Generate()
        {
            // MD5 produces 128bit hash of input string which can be converted to GUID
            var scopeHash = ComputeMD5Hash(mScopeDescriptor);

            // Make the guid "name based" to prevent collision with guid generated by Guid.NewGuid()
            scopeHash = SetGuidVersionNumber(scopeHash);

            return new Guid(scopeHash);
        }


        private byte[] ComputeMD5Hash(string input)
	    {
	        using (var md5CryptoServiceProvider = new MD5CryptoServiceProvider())
	        {
	            var dataToHash = Encoding.UTF8.GetBytes(input);
	
	            return md5CryptoServiceProvider.ComputeHash(dataToHash);
	        }
	    }


        /// <summary>
        /// Sets the version number in UUID according to RFC 4122 to make UUID "name based".
        /// Name based UUID cannot be in collision with UUID generated by Guid.NewGuid(). Name based
        /// UUID can have version 3 or 5 while Guid.NewGuid() generates (pseudo-)random UUID which is
        /// always in 4 version. 
        /// </summary>
        private byte[] SetGuidVersionNumber(byte[] scopeHash)
        {
            // Set the four most significant bits (bits 12 through 15) of the time_hi_and_version field to the appropriate 4-bit version number
            scopeHash[7] = (byte)((scopeHash[7] & 0x0F) | (UUID_VERSION << 4));

            return scopeHash;
        }
    }
}
