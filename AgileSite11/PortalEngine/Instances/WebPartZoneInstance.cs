using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text.RegularExpressions;
using System.Xml;

using CMS.Base;
using CMS.FormEngine;
using CMS.Helpers;

namespace CMS.PortalEngine
{
    /// <summary>
    /// Web part zone instance. Keeps configuration data for parent web part.
    /// </summary>
    [DebuggerDisplay("WebPartZoneInstance({ZoneID})")]
    public class WebPartZoneInstance
    {
        #region "Variables"

        private List<WebPartInstance> mWebParts = new List<WebPartInstance>();

        private readonly Hashtable mProperties = new Hashtable(StringComparer.InvariantCultureIgnoreCase);
        private Hashtable mMacroTable = new Hashtable(StringComparer.InvariantCultureIgnoreCase);

        #endregion


        #region "Public Properties"

        /// <summary>
        /// Gets or sets the zone instance XML version
        /// </summary>
        public int XMLVersion
        {
            get;
            set;
        }


        /// <summary>
        /// Hashtable with IsMacro flags.
        /// </summary>
        public Hashtable MacroTable
        {
            get
            {
                return mMacroTable;
            }
            set
            {
                mMacroTable = value;
            }
        }


        /// <summary>
        /// Web parts collection within the zone.
        /// </summary>
        public List<WebPartInstance> WebParts
        {
            get
            {
                return mWebParts;
            }
            set
            {
                mWebParts = value;
            }
        }


        /// <summary>
        /// If true, the zone is generated by layout.
        /// </summary>
        public bool LayoutZone
        {
            get;
            set;
        }


        /// <summary>
        /// Web part zone ID.
        /// </summary>
        public string ZoneID
        {
            get;
            set;
        }


        /// <summary>
        /// Parent PageTemplate instance for the zone.
        /// </summary>
        public PageTemplateInstance ParentTemplateInstance
        {
            get;
            set;
        }


        /// <summary>
        /// Web part properties table.
        /// </summary>
        public Hashtable Properties
        {
            get
            {
                return mProperties;
            }
        }


        /// <summary>
        /// Instance GUID to identify the web part.
        /// </summary>
        public Guid InstanceGUID
        {
            get;
            set;
        }


        /// <summary>
        /// Widget zone type.
        /// </summary>
        public WidgetZoneTypeEnum WidgetZoneType
        {
            get;
            set;
        }


        /// <summary>
        /// Gets the zone instance variant list.
        /// </summary>
        public virtual List<WebPartZoneInstance> ZoneInstanceVariants
        {
            get;
            set;
        }


        /// <summary>
        /// Indicates if webpart instance is a variant of the original web part
        /// </summary>
        public bool IsVariant
        {
            get
            {
                return (VariantID > 0);
            }
        }


        /// <summary>
        /// Gets or sets the variant id.
        /// </summary>
        public int VariantID
        {
            get;
            set;
        }


        /// <summary>
        /// Indicates whether the web part zone has any variants.
        /// </summary>
        public bool HasVariants
        {
            get
            {
                return ((ZoneInstanceVariants != null) && (ZoneInstanceVariants.Count > 0));
            }
        }


        /// <summary>
        /// Indicates whether any of the zone web parts contains variants.
        /// </summary>
        public bool WebPartsContainVariants
        {
            get
            {
                if (WebParts != null)
                {
                    foreach (WebPartInstance webpart in WebParts)
                    {
                        if (webpart.HasVariants)
                        {
                            return true;
                        }
                    }
                }

                return false;
            }
        }

        /// <summary>
        /// Gets the variant mode which is used for the variants of this web part instance.
        /// </summary>
        public VariantModeEnum VariantMode
        {
            get;
            set;
        }

        #endregion


        #region "Public methods"

        /// <summary>
        /// Constructor.
        /// </summary>
        public WebPartZoneInstance()
        {
            XMLVersion = 1;
            WidgetZoneType = WidgetZoneTypeEnum.None;
            VariantMode = VariantModeEnum.None;
        }


        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="zoneNode">XML node with the zone data (containing the web parts information</param>
        public WebPartZoneInstance(XmlNode zoneNode)
            : this()
        {
            // If no data given, exit
            if (zoneNode == null)
            {
                return;
            }
            // Recreate the webparts collection
            WebParts.Clear();

            // Get the zone ID
            if ((zoneNode.Attributes["id"] == null) || (zoneNode.Attributes["id"].Value.Trim() == ""))
            {
                throw new Exception("[new WebPartZoneInstance(XmlNode)]: Missing zone ID attribute.");
            }
            ZoneID = zoneNode.Attributes["id"].Value.Trim();

            // Zone type
            if (zoneNode.Attributes["widgetzonetype"] != null)
            {
                WidgetZoneType = zoneNode.Attributes["widgetzonetype"].Value.ToEnum<WidgetZoneTypeEnum>();
            }

            // Layout zone
            if (zoneNode.Attributes["layoutzone"] != null)
            {
                LayoutZone = ValidationHelper.GetBoolean(zoneNode.Attributes["layoutzone"].Value, false);
            }


            // XML version
            XMLVersion = 0;
            if (zoneNode.Attributes["v"] != null)
            {
                XMLVersion = ValidationHelper.GetInteger(zoneNode.Attributes["v"].Value, 0);
            }

            // Get the properties
            XmlNodeList properties = zoneNode.SelectNodes("properties/property");

            if (properties != null)
            {
                // Load the properties
                foreach (XmlNode propNode in properties)
                {
                    XmlAttribute attr = propNode.Attributes["name"];

                    // Get the property name
                    if ((attr != null) && (attr.Value.Trim() != ""))
                    {
                        string name = attr.Value.Trim();

                        // Get the property value and ismacro flag
                        string value = propNode.InnerText;
                        bool isMacro = ((propNode.Attributes["ismacro"] != null) && ValidationHelper.GetBoolean(propNode.Attributes["ismacro"].Value, false));
                        if (isMacro)
                        {
                            MacroTable[name.ToLowerCSafe()] = value;
                        }
                        else
                        {
                            MacroTable[name.ToLowerCSafe()] = null;
                        }
                        SetValue(name, value);
                    }
                }
            }

            // Get the web parts
            XmlNodeList parts = zoneNode.SelectNodes("webpart");
            if (parts != null)
            {
                // Add the web parts
                foreach (XmlNode partNode in parts)
                {
                    // Create new web part instance
                    WebPartInstance newPart = new WebPartInstance(partNode);
                    newPart.ParentZone = this;
                    WebParts.Add(newPart);
                }
            }
        }


        /// <summary>
        /// Loads all the MVT/Content personalization variants for this zone instance.
        /// </summary>
        /// <param name="forceLoad">Indicates if already loaded variants should be reloaded</param>
        /// <param name="variantMode">Specifies which variants should be loaded (MVT/ContentPersonalization/None - means both MVT+CP variants should try to load)</param>
        public void LoadVariants(bool forceLoad, VariantModeEnum variantMode)
        {
            WebPartEvents.WebPartZoneLoadVariant.StartEvent(new WebPartLoadVariantsArgs()
            {
                ForceLoad = forceLoad,
                VariantMode = variantMode,
                WebPartZoneInstance = this
            });
        }


        /// <summary>
        /// Returns the web part instance with specified GUID or null when not found.
        /// </summary>
        /// <param name="instanceGuid">Web part ID to get</param>
        public WebPartInstance GetWebPart(Guid instanceGuid)
        {
            if (instanceGuid == Guid.Empty)
            {
                return null;
            }
            foreach (WebPartInstance part in WebParts)
            {
                if (part.InstanceGUID == instanceGuid)
                {
                    return part;
                }
            }
            return null;
        }


        /// <summary>
        /// Returns the web part instance with specified ID or null when not found.
        /// </summary>
        /// <param name="webPartId">Web part ID to get</param>
        /// <param name="searchInVariants">Indicates whether to search in the zone variants as well.</param>
        public WebPartInstance GetWebPart(string webPartId, bool searchInVariants = false)
        {
            webPartId = webPartId.ToLowerCSafe();
            foreach (WebPartInstance part in WebParts)
            {
                if (part.ControlID.ToLowerCSafe() == webPartId)
                {
                    return part;
                }

                if (searchInVariants && (part.PartInstanceVariants != null))
                {
                    WebPartInstance variant = part.PartInstanceVariants.Find(v => v.ControlID.ToLowerCSafe().EqualsCSafe(webPartId, true));
                    if (variant != null)
                    {
                        return variant;
                    }
                }
            }
            return null;
        }


        /// <summary>
        /// Adds a web part instance of a specified type to the webparts.
        /// </summary>
        /// <param name="webPartId">Web part code name</param>
        /// <param name="position">The position of the web part in the target zone</param>
        public WebPartInstance AddWebPart(int webPartId, int position = -1)
        {
            WebPartInfo pi = WebPartInfoProvider.GetWebPartInfo(webPartId);
            if (pi == null)
            {
                return null;
            }
            else
            {
                // Create new web part instance
                WebPartInstance newInstance = new WebPartInstance();
                newInstance.ControlID = GetUniqueWebPartId(pi.WebPartName, ParentTemplateInstance);
                newInstance.WebPartType = pi.WebPartName;
                newInstance.ParentZone = this;
                newInstance.InstanceGUID = Guid.NewGuid();

                // Add to the web parts
                if (position < 0)
                {
                    // Add at the end
                    WebParts.Add(newInstance);
                }
                else
                {
                    // Insert at a specific position
                    WebParts.Insert(position, newInstance);
                }

                return newInstance;
            }
        }


        /// <summary>
        /// Adds a widget instance of a specified type.
        /// </summary>
        /// <param name="widgetId">Widget id</param>
        internal WebPartInstance AddWidget(int widgetId)
        {
            WidgetInfo wi = WidgetInfoProvider.GetWidgetInfo(widgetId);
            if (wi == null)
            {
                return null;
            }
            else
            {
                // Create new web part instance
                WebPartInstance newInstance = new WebPartInstance();
                newInstance.ControlID = GetUniqueWebPartId(wi.WidgetName, ParentTemplateInstance);
                newInstance.WebPartType = wi.WidgetName;
                newInstance.ParentZone = this;
                newInstance.InstanceGUID = Guid.NewGuid();
                newInstance.IsWidget = true;

                // Add widget to the web parts array
                WebParts.Add(newInstance);
                return newInstance;
            }
        }


        /// <summary>
        /// Add the web part to the zone. If the web part is present in different zone, creates a copy of the web part.
        /// </summary>
        /// <param name="webPart">Web part to add</param>
        /// <param name="position">Position where to add the web part</param>
        /// <remarks>Returns a new instance of web part if the given web part is present within it's parent zone</remarks>
        public WebPartInstance AddWebPart(WebPartInstance webPart, int position = -1)
        {
            if (webPart != null)
            {
                // If present in it's original zone, create a copy
                if ((webPart.ParentZone != null) && (webPart.ParentZone.GetWebPart(webPart.ControlID) != null))
                {
                    webPart = webPart.Clone();
                }

                webPart.ControlID = GetUniqueWebPartId(webPart.ControlID, ParentTemplateInstance);
                webPart.ParentZone = this;

                if ((position < 0) || (WebParts.Count == 0) || (position > WebParts.Count))
                {
                    // Add the web part to the end
                    WebParts.Add(webPart);
                }
                else
                {
                    // Insert to specific position
                    WebParts.Insert(position, webPart);
                }
            }

            return webPart;
        }


        /// <summary>
        /// Returns unique web part ID within the given Page template.
        /// </summary>
        /// <param name="baseId">Base web part id (required)</param>
        /// <param name="templateInstance">Page template instance</param>
        /// <param name="counterOffset">The counter number which will be used as a starter counter for checking the unique id. Example: counterOffset=2, returns ids starting with number two ('wp_2', 'wp_3', 'wp_4'...)</param>
        public static string GetUniqueWebPartId(string baseId, PageTemplateInstance templateInstance, int counterOffset = 0)
        {
            // If no parent template or no zones, give back the required ID
            if ((templateInstance == null) || (templateInstance.WebPartZones == null))
            {
                return baseId;
            }

            return templateInstance.GetUniqueWebPartId(baseId, counterOffset);
        }


        /// <summary>
        /// Removes all web parts from the schema.
        /// </summary>
        public void RemoveAllWebParts()
        {
            RemoveWebPartsArgs args = new RemoveWebPartsArgs()
            {
                Zone = this
            };

            using (var h = WebPartEvents.RemoveAllWebParts.StartEvent(args))
            {
                if (h.CanContinue())
                {
                    if (ParentTemplateInstance != null)
                    {
                        // Remove the nested zones of all web parts
                        foreach (WebPartInstance webPart in WebParts)
                        {
                            var wpi = WebPartInfoProvider.GetWebPartInfo(webPart.WebPartType);
                            if ((wpi != null) && ((WebPartTypeEnum)wpi.WebPartType == WebPartTypeEnum.Layout))
                            {
                                ParentTemplateInstance.RemoveNestedZones(webPart);
                            }
                        }
                    }

                    WebParts.Clear();

                    h.FinishEvent();
                }
            }
        }


        /// <summary>
        /// Removes the web part instance from the schema.
        /// </summary>
        /// <param name="webPart">Web part</param>
        public void RemoveWebPart(WebPartInstance webPart)
        {
            if (WebParts.Contains(webPart))
            {
                RemoveWebPartsArgs arg = new RemoveWebPartsArgs()
                {
                    WebPartInstance = webPart,
                    Zone = this
                };

                using (var h = WebPartEvents.RemoveWebPart.StartEvent(arg))
                {
                    var wpi = WebPartInfoProvider.GetWebPartInfo(webPart.WebPartType);
                    if ((wpi != null) && ((WebPartTypeEnum)wpi.WebPartType == WebPartTypeEnum.Layout))
                    {
                        // Remove the nested zones of all web parts
                        ParentTemplateInstance?.RemoveNestedZones(webPart);
                    }

                    WebParts.Remove(webPart);
                    h.FinishEvent();
                }
            }
        }


        /// <summary>
        /// Removes the web part instance from the web part list.
        /// </summary>
        internal void RemoveWebPart(string webPartControlId)
        {
            // Just remove the instance
            WebPartInstance part = GetWebPart(webPartControlId);
            if (part != null)
            {
                RemoveWebPart(part);
            }
        }


        private Dictionary<string, string> GetAttributes()
        {
            var attributes = new Dictionary<string, string>();

            attributes["id"] = ZoneID;

            // Widget zone type attribute
            if (WidgetZoneType != WidgetZoneTypeEnum.None)
            {
                attributes["widgetzonetype"] = WidgetZoneType.ToStringRepresentation();
            }

            // Layout zone attribute
            if (LayoutZone)
            {
                attributes["layoutzone"] = "true";
            }

            // XML Version
            if (XMLVersion > 0)
            {
                attributes["v"] = XMLVersion.ToString();
            }

            return attributes;
        }


        /// <summary>
        /// Returns the Xml node representing the zone configuration.
        /// </summary>
        /// <param name="doc">Parent XML document</param>
        public XmlElement GetXmlNode(XmlDocument doc = null)
        {
            // Ensure XMl document instance
            if (doc == null)
            {
                doc = new XmlDocument();
            }

            // Zone node
            var zoneNode = doc.CreateElement("webpartzone");

            var attributes = GetAttributes();
            zoneNode.AddAttributes(attributes);

            // Properties
            var propertiesNode = doc.CreateElement("properties");
            propertiesNode.AddChildElements(mProperties, "property", FormHelper.GetPropertyMacroTransformation(mMacroTable));
            if (propertiesNode.HasChildNodes)
            {
                zoneNode.AppendChild(propertiesNode);
            }

            // Add web part nodes
            if (WebParts != null)
            {
                foreach (WebPartInstance part in WebParts)
                {
                    // Add the child Xml node
                    zoneNode.AppendChild(part.GetXmlNode(doc));
                }
            }

            // Return the zone node
            return zoneNode;
        }


        /// <summary>
        /// Moves the specified web part up within the zone instance.
        /// </summary>
        /// <param name="webPartId">Web part ID to move up</param>
        /// <param name="top">If true, the web part is moved to the top</param>
        internal void MoveWebPartUp(string webPartId, bool top)
        {
            // Get the web part
            WebPartInstance part = GetWebPart(webPartId);
            if (part != null)
            {
                // Get the index
                int index = WebParts.IndexOf(part);
                if (index > 0)
                {
                    // Insert to the position before
                    WebParts.Remove(part);
                    if (top)
                    {
                        index = 0;
                    }
                    else
                    {
                        index--;
                    }
                    WebParts.Insert(index, part);
                }
            }
        }


        /// <summary>
        /// Moves the specified web part down within the zone instance.
        /// </summary>
        /// <param name="webPartId">Web part ID to move up</param>
        /// <param name="bottom">If true, the web part is moved to the bottom</param>
        internal void MoveWebPartDown(string webPartId, bool bottom)
        {
            // Get the web part
            WebPartInstance part = GetWebPart(webPartId);
            if (part != null)
            {
                // Get the index
                int index = WebParts.IndexOf(part);
                if (index < WebParts.Count - 1)
                {
                    // Insert to the position after
                    WebParts.Remove(part);
                    if (bottom)
                    {
                        WebParts.Add(part);
                    }
                    else
                    {
                        index++;
                        WebParts.Insert(index, part);
                    }
                }
            }
        }


        /// <summary>
        /// Ensures web part ControlID and instance GUID for current zone
        /// </summary>
        /// <param name="w">Web part instance</param>
        /// <param name="webPartId">Web part ID</param>
        public void EnsureWebPartInstanceIdentificators(WebPartInstance w, string webPartId = null)
        {
            if (w != null)
            {
                if (webPartId == null)
                {
                    webPartId = w.ControlID;
                }
                string baseId = Regex.Replace(webPartId, "\\d+$", "");
                w.ControlID = GetUniqueWebPartId(baseId, ParentTemplateInstance);
                w.InstanceGUID = Guid.NewGuid();
            }
        }


        /// <summary>
        /// Clones the web part.
        /// </summary>
        /// <param name="webPartId">Web part ID to clone</param>
        public WebPartInstance CloneWebPart(string webPartId)
        {
            // Get the web part
            WebPartInstance part = GetWebPart(webPartId);
            if (part != null)
            {
                // Clone the web part
                WebPartInstance newPart = part.Clone(true);

                // Ensure control id
                EnsureWebPartInstanceIdentificators(newPart, webPartId);

                // Add to the web part collection
                WebParts.Add(newPart);

                return newPart;
            }

            return null;
        }


        /// <summary>
        /// Returns the cloned zone instance object.
        /// </summary>
        /// <param name="cloneWebParts">If true, the web parts are cloned within the zone</param>
        /// <param name="copyMacroTable">Indicates whether macro values should be cloned</param>
        public WebPartZoneInstance Clone(bool cloneWebParts = true, bool copyMacroTable = false)
        {
            WebPartZoneInstance zi = new WebPartZoneInstance();

            // Clone data
            zi.ParentTemplateInstance = ParentTemplateInstance;
            zi.ZoneID = ZoneID;
            zi.InstanceGUID = InstanceGUID;
            zi.WidgetZoneType = WidgetZoneType;
            zi.LayoutZone = LayoutZone;
            zi.VariantID = VariantID;
            zi.VariantMode = VariantMode;
            zi.XMLVersion = XMLVersion;

            // Clone the variant list
            if ((ZoneInstanceVariants != null) && (VariantID == 0))
            {
                zi.ZoneInstanceVariants = ZoneInstanceVariants.ConvertAll(variant => variant.Clone(cloneWebParts, copyMacroTable));
            }

            // Clone properties
            foreach (DictionaryEntry property in mProperties)
            {
                zi.mProperties[property.Key] = property.Value;
            }

            // Clone macro values
            if (copyMacroTable)
            {
                foreach (DictionaryEntry macro in mMacroTable)
                {
                    zi.mMacroTable.Add(macro.Key, macro.Value);
                }
            }

            // Clone web parts
            if (cloneWebParts)
            {
                foreach (WebPartInstance part in WebParts)
                {
                    WebPartInstance newPart = part.Clone(copyMacroTable);
                    newPart.ParentZone = zi;
                    zi.WebParts.Add(newPart);
                }
            }

            // Return new zone
            return zi;
        }


        /// <summary>
        /// Loads the zone properties from given zone.
        /// </summary>
        /// <param name="zone">Zone to load</param>
        internal void LoadProperties(WebPartZoneInstance zone)
        {
            // Clone properties
            Properties.Clear();

            foreach (DictionaryEntry property in zone.Properties)
            {
                Properties[property.Key] = property.Value;
            }
        }


        /// <summary>
        /// Returns the value of the given webpart property property.
        /// </summary>
        /// <param name="propertyName">Property name</param>
        public object GetValue(string propertyName)
        {
            // Handle special properties
            propertyName = propertyName.ToLowerCSafe();
            switch (propertyName)
            {
                case "zoneid":
                    return ZoneID;

                case "widgetzonetype":
                    return WidgetZoneType;

                default:
                    return mProperties[propertyName];
            }
        }


        /// <summary>
        /// Sets the property value of the control.
        /// </summary>
        /// <param name="propertyName">Property name to set</param>
        /// <param name="value">New property value</param>
        public void SetValue(string propertyName, object value)
        {
            if (value == DBNull.Value)
            {
                value = null;
            }
            // Handle special properties
            propertyName = propertyName.ToLowerCSafe();
            switch (propertyName)
            {
                case "zoneid":
                    ZoneID = DataHelper.GetNotEmpty(value, ZoneID);
                    return;

                case "widgetzonetype":
                    WidgetZoneType = ValidationHelper.GetString(value, "").ToEnum<WidgetZoneTypeEnum>();
                    return;
            }

            mProperties[propertyName] = value;
        }


        /// <summary>
        /// Clears the given properties
        /// </summary>
        /// <param name="propertyNames">Property names to clear</param>
        public void ClearValues(params string[] propertyNames)
        {
            foreach (string name in propertyNames)
            {
                SetValue(name, null);
            }
        }

        #endregion
    }
}