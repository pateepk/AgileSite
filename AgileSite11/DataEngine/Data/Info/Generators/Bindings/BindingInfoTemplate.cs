// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CMS.DataEngine.Generators
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class BindingInfoTemplate : BindingInfoTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Data;\r\nusing System.Runtime.Serialization;\r\n");
 if (HasReferences) { 
            this.Write("using System.Collections.Generic;\r\n");
 } 
            this.Write("\r\nusing CMS;\r\nusing CMS.DataEngine;\r\nusing CMS.Helpers;\r\nusing ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write(";\r\n\r\n[assembly: RegisterObjectType(typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoClassName));
            this.Write("), ");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoClassName));
            this.Write(".OBJECT_TYPE)]\r\n\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write("\r\n{\r\n    /// <summary>\r\n    /// Data container class for <see cref=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoClassName));
            this.Write("\"/>.\r\n    /// </summary>\r\n    [Serializable]\r\n    public ");
 if (GeneratePartialClass) { 
            this.Write("partial ");
 } 
            this.Write("class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoClassName));
            this.Write(" : AbstractInfo<");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoClassName));
            this.Write(">\r\n    {\r\n        /// <summary>\r\n        /// Object type.\r\n        /// </summary>" +
                    "\r\n        public const string OBJECT_TYPE = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ObjectType));
            this.Write(";\r\n\r\n\r\n        /// <summary>\r\n        /// Type information.\r\n        /// </summar" +
                    "y>\r\n#warning \"You will need to configure the type info.\"\r\n        public static " +
                    "readonly ObjectTypeInfo TYPEINFO = new ObjectTypeInfo(typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoProviderClassName));
            this.Write("), OBJECT_TYPE, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ObjectClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IdColumn));
            this.Write(", null, null, null, null, null, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SiteIdColumn));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ParentColumn));
            this.Write(", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(ParentObjectType));
            this.Write("\")\r\n        {\r\n\t\t\tModuleName = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(ModuleName));
            this.Write("\",\r\n\t\t\tTouchCacheDependencies = true,\r\n");
 if (HasReferences) { 
            this.Write("            DependsOn = new List<ObjectDependency>() \r\n\t\t\t{\r\n");
 foreach (InfoTemplateProperty property in References) { 
 if (!string.IsNullOrEmpty(property.ReferenceToObjectType)) { 
            this.Write("\t\t\t    new ObjectDependency(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.ReferenceToObjectType));
            this.Write("\", ObjectDependencyEnum.");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.ReferenceType));
            this.Write("), \r\n");
 } 
 } 
            this.Write("            },\r\n");
 } 
            this.Write("        };\r\n");
 foreach (InfoTemplateProperty property in Properties) { 
            this.Write("\r\n\r\n        /// <summary>\r\n        /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Comment));
            this.Write("\r\n        /// </summary>\r\n");
 if (property.HasDatabaseRepresentation) { 
            this.Write("\t\t[DatabaseField]\r\n");
 } 
            this.Write("        public virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Type));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            this.Write("\r\n        {\r\n            get\r\n            {\r\n                return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.GetMethod));
            this.Write("(");
 if (property.UseGetValue) { 
            this.Write("GetValue(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            this.Write("\")");
 } else { 
            this.Write("\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            this.Write("\"");
 } 
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.DefaultValue));
            this.Write(");\r\n            }\r\n            set\r\n            {\r\n                SetValue(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            this.Write("\", value");
 if (property.AllowEmpty && !String.IsNullOrEmpty(property.TypeDefaultValue)) { 
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.TypeDefaultValue));
 } 
            this.Write(");\r\n            }\r\n        }\r\n");
 } 
            this.Write("\r\n\r\n        /// <summary>\r\n        /// Deletes the object using appropriate provi" +
                    "der.\r\n        /// </summary>\r\n        protected override void DeleteObject()\r\n  " +
                    "      {\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoProviderClassName));
            this.Write(".Delete");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoClassName));
            this.Write("(this);\r\n        }\r\n\r\n\r\n        /// <summary>\r\n        /// Updates the object usi" +
                    "ng appropriate provider.\r\n        /// </summary>\r\n        protected override voi" +
                    "d SetObject()\r\n        {\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoProviderClassName));
            this.Write(".Set");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoClassName));
            this.Write("(this);\r\n        }\r\n\r\n\t\t\r\n\t\t/// <summary>\r\n        /// Constructor for de-seriali" +
                    "zation.\r\n        /// </summary>\r\n        /// <param name=\"info\">Serialization in" +
                    "fo.</param>\r\n        /// <param name=\"context\">Streaming context.</param>\r\n     " +
                    "   protected ");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoClassName));
            this.Write("(SerializationInfo info, StreamingContext context)\r\n            : base(info, cont" +
                    "ext, TYPEINFO)\r\n        {\r\n        }\r\n\r\n\r\n        /// <summary>\r\n        /// Cre" +
                    "ates an empty instance of the <see cref=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoClassName));
            this.Write("\"/> class.\r\n        /// </summary>\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoClassName));
            this.Write("()\r\n            : base(TYPEINFO)\r\n        {\r\n        }\r\n\r\n\r\n        /// <summary>" +
                    "\r\n        /// Creates a new instance of the <see cref=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoClassName));
            this.Write("\"/> class from the given <see cref=\"DataRow\"/>.\r\n        /// </summary>\r\n        " +
                    "/// <param name=\"dr\">DataRow with the object data.</param>\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(InfoClassName));
            this.Write("(DataRow dr)\r\n            : base(TYPEINFO, dr)\r\n        {\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class BindingInfoTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
